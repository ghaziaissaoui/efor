@use 'sass:map';
@use 'front/config/sass' as *;
@use './config/functions';
@use './config/mixins';
@use './config/variables';

/*
  Index
  ---------- ---------- ---------- ---------- ----------
  • Container base
  • Row base
  • Column base
  • Breakpoints
  • Right to left
*/

/*
  • Container base
  ---------- ---------- ---------- ----------
*/

%container-base {
  box-sizing: border-box;
  position: relative;
  margin-left: auto;
  margin-right: auto;
}

%container-margins {
  padding-left: map.get(variables.$base, 'margins');
  padding-right: map.get(variables.$base, 'margins');
}

%container-max-width {
  max-width: map.get(variables.$base, 'max-width');
}

%container-adjusted-max-width {
  max-width: (map.get(variables.$base, 'max-width') + map.get(variables.$base, 'margins') * 2);
}

.container {
  @extend %container-base;
  @extend %container-margins;
  @extend %container-adjusted-max-width;
}

.fluid-container {
  @extend %container-base;
  @extend %container-margins;
}

.flush-container {
  @extend %container-base;
  @extend %container-max-width;
}

.full-container {
  @extend %container-base;
}

/*
  • Row base
  ---------- ---------- ---------- ----------
*/

%row-base {
  display: flex;
  flex-wrap: wrap;
  align-items: stretch;
  align-content: flex-start;
  box-sizing: border-box;
}

%row-gutter {
  margin-left: (-1 * map.get(variables.$base, 'gutters') / 2);
  margin-right: (-1 * map.get(variables.$base, 'gutters') / 2);
}

.row {
  @extend %row-base;
  @extend %row-gutter;
}

.flush-row {
  @extend %row-base;
}

/*
  • Column base
  ---------- ---------- ---------- ----------
*/

%column-base {
  flex: 0 0 100%;
  box-sizing: border-box;
  width: 100%;
  max-width: 100%;
}

%column-gutter {
  padding-left: (map.get(variables.$base, 'gutters') / 2);
  padding-right: (map.get(variables.$base, 'gutters') / 2);
}

%column-fit-content {
  flex-basis: auto;
  width: auto;
}

%column-fill-space {
  flex-grow: 1;
  flex-basis: 0%;
  width: 0%;
}

.column {
  @extend %column-base;
  @extend %column-gutter;
}

.column-fit-content {
  @extend %column-base;
  @extend %column-gutter;
  @extend %column-fit-content;
}

.column-fill-space {
  @extend %column-base;
  @extend %column-gutter;
  @extend %column-fill-space;
}

.flush-column {
  @extend %column-base;
}

.flush-column-fit-content {
  @extend %column-base;
  @extend %column-fit-content;
}

.flush-column-fill-space {
  @extend %column-base;
  @extend %column-fill-space;
}

@for $-i from 1 to variables.$number-of-columns {
  .column-#{$-i} {
    @extend %column-base;
    @extend %column-gutter;
  }

  .flush-column-#{$-i} {
    @extend %column-base;
  }

  .column-#{$-i}, .flush-column-#{$-i} {
    flex-basis: (100% / variables.$number-of-columns) * $-i;
    max-width: (100% / variables.$number-of-columns) * $-i;
  }
}

@each $-slug, $-obj in variables.$breakpoints {
  $-virtual: if(map.has-key($-obj, 'virtual'), map.get($-obj, 'virtual'), false);

  @if $-virtual != true {
    $-name:     map.get($-obj, 'name');
    $-prefix:  '\\@' + map.get($-obj, 'shorthand') + '\\:';
    $-value:    map.get($-obj, 'value');
    $-margins:    map.get($-obj, 'margins');
    $-max-width:  map.get($-obj, 'max-width');
    $-gutters:    map.get($-obj, 'gutters');

    .#{$-prefix}column {
      @extend %column-base;
      @extend %column-gutter;
    }

    .#{$-prefix}flush-column {
      @extend %column-base;
    }

    .#{$-prefix}column-fit-content {
      @extend %column-base;
      @extend %column-gutter;
    }

    .#{$-prefix}flush-column-fit-content {
      @extend %column-base;
    }

    .#{$-prefix}column-fill-space {
      @extend %column-base;
      @extend %column-gutter;
    }

    .#{$-prefix}flush-column-fill-space {
      @extend %column-base;
    }

    @for $-i from 1 to variables.$number-of-columns {
      .#{$-prefix}column-#{$-i} {
        @extend %column-base;
        @extend %column-gutter;
      }

      .#{$-prefix}flush-column-#{$-i} {
        @extend %column-base;
      }
    }
  }
}

@if variables.$include-push {
  @for $-i from 1 to variables.$number-of-columns {
    .push-#{$-i} {
      margin-left: (100% / variables.$number-of-columns) * $-i;
    }
  }
}

@if variables.$include-pull {
  @for $-i from 1 to variables.$number-of-columns {
    .pull-#{$-i} {
      margin-right: (100% / variables.$number-of-columns) * $-i;
    }
  }
}

/*
  • Breakpoints
  ---------- ---------- ---------- ----------
*/

@each $-slug, $-obj in variables.$breakpoints {
  $-virtual: if(map.has-key($-obj, 'virtual'), map.get($-obj, 'virtual'), false);

  @if $-virtual != true {
    $-name:     map.get($-obj, 'name');
    $-prefix:  '\\@' + map.get($-obj, 'shorthand') + '\\:';
    $-value:    map.get($-obj, 'value');
    $-margins:    map.get($-obj, 'margins');
    $-max-width:  map.get($-obj, 'max-width');
    $-gutters:    map.get($-obj, 'gutters');

    @include mixins.up($-value) {
      @if $-margins or $-max-width {
        .container {
          $-last-set-margins: functions.get-config($-slug, 'margins');
          $-last-set-max-width: functions.get-config($-slug, 'max-width');

          max-width: ($-last-set-max-width + $-last-set-margins * 2);
        }
      }

      @if $-margins {
        .container,
        .fluid-container {
          padding-left: $-margins;
          padding-right: $-margins;
        }
      }

      @if $-max-width {
        .flush-container {
          max-width: $-max-width;
        }
      }

      @if $-gutters {
        .row {
          margin-left: (-$-gutters / 2);
          margin-right: (-$-gutters / 2);
        }

        %column-gutter#{$-prefix} {
          padding-left: ($-gutters / 2);
          padding-right: ($-gutters / 2);
        }

        .column {
          @extend %column-gutter#{$-prefix};
        }

        .column-fit-content {
          @extend %column-gutter#{$-prefix};
        }

        .column-fill-space {
          @extend %column-gutter#{$-prefix};
        }

        @for $-i from 1 to variables.$number-of-columns {
          .column-#{$-i} {
            @extend %column-gutter#{$-prefix};
          }
        }

        @each $loop_slug, $loop_obj in variables.$breakpoints {
          $loop_virtual: if(map.has-key($-obj, "virtual"), map.get($-obj, "virtual"), false);

          @if $loop_virtual != true {
            $loop_shorthand: '\\@' + map.get($loop_obj, 'shorthand') + '\\:';

            .#{$loop_shorthand}column {
              @extend %column-gutter#{$-prefix};
            }

            .#{$loop_shorthand}column-fit-content {
              @extend %column-gutter#{$-prefix};
            }

            .#{$loop_shorthand}column-fill-space {
              @extend %column-gutter#{$-prefix};
            }

            @for $-i from 1 to variables.$number-of-columns {
              .#{$loop_shorthand}column-#{$-i} {
                @extend %column-gutter#{$-prefix};
              }
            }
          }
        }
      }

      .#{$-prefix}column-fit-content, .#{$-prefix}flush-column-fit-content {
        flex-basis: auto;
        width: auto;
        max-width: 100%;
      }

      .#{$-prefix}column-fill-space, .#{$-prefix}flush-column-fill-space {
        flex-grow: 1;
        flex-basis: 0%;
        width: 0%;
        max-width: 100%;
      }

      .#{$-prefix}column, .#{$-prefix}flush-column {
        flex-basis: 100%;
        max-width: 100%;
      }

      @for $-i from 1 to variables.$number-of-columns {
        .#{$-prefix}column-#{$-i}, .#{$-prefix}flush-column-#{$-i} {
          flex-basis: (100% / variables.$number-of-columns) * $-i;
          max-width: (100% / variables.$number-of-columns) * $-i;
        }
      }

      @if variables.$include-push {
        .#{$-prefix}no-push {
          margin-left: 0;
        }

        @for $-i from 1 to variables.$number-of-columns {
          .#{$-prefix}push-#{$-i} {
            margin-left: (100% / variables.$number-of-columns) * $-i;
          }
        }
      }

      @if variables.$include-pull {
        .#{$-prefix}no-pull {
          margin-right: 0;
        }

        @for $-i from 1 to variables.$number-of-columns {
          .#{$-prefix}pull-#{$-i} {
            margin-right: (100% / variables.$number-of-columns) * $-i;
          }
        }
      }
    }
  }
}

/*
  • Right to left
  ---------- ---------- ---------- ----------
*/

@if variables.$include-rtl {
  %reverse-row {
    flex-direction: row-reverse;
  }

  .row--reverse {
    @extend %reverse-row;
  }
}
